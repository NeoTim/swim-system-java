// Build with `gradle -Pno-modules` to force compatibility with legacy JVMs.
def javaVersion = System.getProperty('java.version').split('\\.')
ext.jvmVersion = (javaVersion[0] as Integer) > 1 ? javaVersion[0] as Integer : javaVersion[1] as Integer
ext.useModules = jvmVersion >= 9 && !hasProperty('no-modules')
ext.graalVersion = project.property('graal.version')

project(':swim-api') {
  afterEvaluate {
    dependencies {
      api project(':swim-util')
      api project(':swim-codec')
      api project(':swim-structure')
      api project(':swim-math')
      api project(':swim-spatial')
      api project(':swim-streamlet')
      api project(':swim-dataflow')
      api project(':swim-observable')
      api project(':swim-http')
      api project(':swim-ws')
      api project(':swim-mqtt')
      api project(':swim-warp')
      api project(':swim-concurrent')
      api project(':swim-io')
    }
  }
}

project(':swim-store') {
  afterEvaluate {
    dependencies {
      implementation project(':swim-util')
      api project(':swim-codec')
      api project(':swim-structure')
      api project(':swim-math')
      api project(':swim-spatial')
    }
  }
}

project(':swim-runtime') {
  afterEvaluate {
    dependencies {
      implementation project(':swim-util')
      api project(':swim-codec')
      api project(':swim-structure')
      api project(':swim-math')
      api project(':swim-spatial')
      api project(':swim-http')
      api project(':swim-mqtt')
      api project(':swim-warp')
      api project(':swim-concurrent')
    }
  }
}

project(':swim-kernel') {
  afterEvaluate {
    dependencies {
      implementation project(':swim-recon')
      api project(':swim-io')
    }
  }
}

project(':swim-auth') {
  afterEvaluate {
    dependencies {
      api project(':swim-security')
      api project(':swim-io-http')
    }
  }
}

project(':swim-store-mem') {
  afterEvaluate {
    dependencies {
      api project(':swim-collections')
      api project(':swim-spatial')
    }
  }
}

project(':swim-remote') {
  afterEvaluate {
    dependencies {
      api project(':swim-io-warp')
      api project(':swim-runtime')
    }
  }
}

project(':swim-cli') {
  afterEvaluate {
    dependencies {
      api project(':swim-args')
      api project(':swim-recon')
      api project(':swim-json')
    }
  }
}

project(':swim-dynamic') {
  afterEvaluate {
    dependencies {
      implementation project(':swim-collections')
    }
  }
}

project(':swim-dynamic-structure') {
  afterEvaluate {
    dependencies {
      api project(':swim-structure')
    }
  }
}

project(':swim-dynamic-observable') {
  afterEvaluate {
    dependencies {
      api project(':swim-observable')
    }
  }
}

project(':swim-dynamic-api') {
  afterEvaluate {
    dependencies {
      api project(':swim-api')
    }
  }
}

project(':swim-vm') {
  afterEvaluate {
    dependencies {
      implementation project(':swim-collections')
    }
  }
}

project(':swim-vm-js') {
  afterEvaluate {
    dependencies {
      implementation project(':swim-json')
      api project(':swim-uri')
    }
  }
}

project(':swim-js') {
  afterEvaluate {
    dependencies {
      testCompile project(':swim-json')
      api project(':swim-kernel')
      testCompile project(':swim-server')
    }
  }
}

gradle.projectsEvaluated {
  apply plugin: 'java'

  def javaProjects = subprojects.findAll { subproject -> subproject.plugins.hasPlugin(JavaPlugin) }

  if (useModules) {
    javaProjects.each { project ->
      compileJava.dependsOn project.tasks.compileModuleInfoJava
    }
  }

  javadoc {
    title 'Swim System'
    options.overview = "${projectDir}/overview.html"
    if (useModules) {
      options.group('System',
        'swim.args',
        'swim.codec',
        'swim.collections',
        'swim.concurrent',
        'swim.dataflow',
        'swim.math',
        'swim.observable',
        'swim.security',
        'swim.spatial',
        'swim.streamlet',
        'swim.structure',
        'swim.uri',
        'swim.util')
      options.group('Data',
        'swim.decipher',
        'swim.deflate',
        'swim.json',
        'swim.protobuf',
        'swim.recon',
        'swim.xml')
      options.group('Network',
        'swim.http',
        'swim.io',
        'swim.io.http',
        'swim.io.mqtt',
        'swim.io.warp',
        'swim.io.ws',
        'swim.mqtt',
        'swim.warp',
        'swim.ws')
      options.group('Storage',
        'swim.store',
        'swim.store.mem')
      options.group('Runtime',
        'swim.api',
        'swim.auth',
        'swim.client',
        'swim.fabric',
        'swim.java',
        'swim.kernel',
        'swim.remote',
        'swim.runtime',
        'swim.server',
        'swim.service',
        'swim.service.warp')
      options.group('Polyglot',
        'swim.dynamic',
        'swim.dynamic.api',
        'swim.dynamic.java',
        'swim.dynamic.observable',
        'swim.dynamic.structure',
        'swim.js',
        'swim.vm',
        'swim.vm.js')
      options.group('Tools',
        'swim.cli')
    }

    // Google Analytics Tracking Code
    options.addBooleanOption("-allow-script-in-comments", true)
    options.header = "<script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-79441805-2\"></script>\n" +
                     "<script>\n" +
                     "  window.dataLayer = window.dataLayer || [];\n" +
                     "  function gtag(){dataLayer.push(arguments);}\n" +
                     "  gtag('js', new Date());\n" +
                     "  gtag('config', 'UA-79441805-2');\n" +
                     "</script>\n";

    source javaProjects.collect { project -> project.sourceSets.main.allJava }
    doFirst {
      if (useModules) {
        def modules = javaProjects.collect { project -> project.moduleName }
        options.addStringOption('-module', modules.join(','))
        options.addStringOption('-module-source-path', [
          "${projectDir}/swim-core-java/*/src/main/java",
          "${projectDir}/swim-mesh-java/*/src/main/java",
          "${projectDir}/swim-polyglot-java/*/src/main/java"].join(':'))
        def classpaths = javaProjects.collect { project -> project.sourceSets.main.compileClasspath.asPath }
        options.addStringOption('-module-path', classpaths.join(':'))
        classpath = files()
      } else {
        exclude '*module-info*'
      }
      options.addBooleanOption('Xdoclint:all,-missing', true)
      options.charSet = 'UTF-8'
      options.encoding = 'UTF-8'
      if (jvmVersion >= 9) {
        options.addBooleanOption('html5', true)
      }
      if (jvmVersion >= 11) {
        options.links += ["https://docs.oracle.com/en/java/javase/" + jvmVersion + "/docs/api/"]
      } else {
        options.links += ["https://docs.oracle.com/javase/" + jvmVersion + "/docs/api/"]
      }
    }
  }

  task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
  }

  artifacts {
    archives javadocJar
  }
}
